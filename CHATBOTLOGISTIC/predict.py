import numpy as np
import pandas as pd
from langchain_core.runnables import RunnableLambda
from chatstate import ChatState
import joblib

# Load model + encoders
mapie_model = joblib.load("mapie_model_lgb.pkl")
label_encoders = joblib.load("label_encoder.pkl")
shipment_encoder = label_encoders["Shipment Mode"]

# C·ªôt ƒë·∫ßu v√†o ƒë√∫ng th·ª© t·ª±
FEATURE_COLUMNS = [
    'DaysToDeliver',
    'Project Code',
    'Country',
    'Pack Price',
    'Vendor',
    'Freight Cost (USD)',
    'Weight (Kilograms)',
    'PQ First Sent to Client Date'
]

# Ph∆∞∆°ng th·ª©c fallback (n·∫øu model kh√¥ng tr·∫£ k·∫øt qu·∫£)
FALLBACK_METHOD = "Standard International Shipping"

def predict_mode(state: ChatState) -> ChatState:
    print("‚ñ∂ [predict_node] ƒêang x·ª≠ l√Ω d·ª± ƒëo√°n MAPIE...")
    features = state.features or {}

    # Format input ƒë√∫ng ƒë·ªãnh d·∫°ng DataFrame
    X = pd.DataFrame([features], columns=FEATURE_COLUMNS)
    X = X.fillna(-1)

    try:
        # D·ª± ƒëo√°n t·∫≠p nh√£n v·ªõi ƒë·ªô tin c·∫≠y 90% t·ª´ MAPIE
        prediction_set = mapie_model.predict(X, alpha=0.3)
        predicted_labels = prediction_set[0]

        if len(predicted_labels) == 0:
            raise ValueError("Kh√¥ng c√≥ nh√£n n√†o ƒë∆∞·ª£c d·ª± ƒëo√°n.")

        # Convert index th√†nh t√™n ph∆∞∆°ng th·ª©c
        label_names = shipment_encoder.inverse_transform(predicted_labels)

        # L·∫•y x√°c su·∫•t th·ª±c t·∫ø n·∫øu model g·ªëc h·ªó tr·ª£
        try:
            base_model = mapie_model.estimator_
            proba = base_model.predict_proba(X)[0]

            # L·∫•y top-n label c√≥ x√°c su·∫•t cao nh·∫•t (v√≠ d·ª• n=3)
            top_n = 3
            top_indices = np.argsort(proba)[-top_n:][::-1]
            label_names = shipment_encoder.inverse_transform(top_indices)

            label_probs = {
                shipment_encoder.inverse_transform([i])[0]: float(proba[i])
                for i in top_indices
}
        except:
            label_probs = {label: None for label in label_names}

        # T·∫°o chu·ªói hi·ªÉn th·ªã cho GPT ho·∫∑c logging
        label_str_list = []
        for label in label_names:
            prob = label_probs[label]
            if prob is not None:
                label_str_list.append(f"**{label}** (x√°c su·∫•t ~{round(prob * 100, 1)}%)")
            else:
                label_str_list.append(f"**{label}**")

        label_str = ", ".join(label_str_list)

        # G√°n v√†o state ƒë·∫ßy ƒë·ªß
        state.shipment_mode = list(label_names)
        state.prediction_prob = max(label_probs.values()) if any(label_probs.values()) else None
        state.label_probs = label_probs  # <-- KEY LINE gi√∫p GPT hi·ªÉu
        state.final_answer = (
            f"M√¥ h√¨nh MAPIE d·ª± ƒëo√°n c√°c ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn ph√π h·ª£p l√†: {label_str}. "
            f"ƒê√¢y l√† nh·ªØng ph∆∞∆°ng √°n c√≥ kh·∫£ nƒÉng cao n·∫±m trong 90% ƒë·ªô tin c·∫≠y c·ªßa m√¥ h√¨nh.\n\n"
            f"üì¶ Trong tr∆∞·ªùng h·ª£p ngo·∫°i l·ªá (10%), ph∆∞∆°ng th·ª©c d·ª± ph√≤ng ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t l√†: **{FALLBACK_METHOD}**."
        )

    except Exception as e:
        state.shipment_mode = [FALLBACK_METHOD]
        state.prediction_prob = 0.0
        state.label_probs = {}
        state.final_answer = (
            f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n do l·ªói: {str(e)}\n"
            f"G·ª£i √Ω s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c d·ª± ph√≤ng: **{FALLBACK_METHOD}**."
        )
    print(f"üß† MAPIE tr·∫£: {state.shipment_mode}")
    print(f"üìä X√°c su·∫•t: {state.label_probs}")

    return state
